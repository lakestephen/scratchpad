TDD Coding Test



BEFORE
Give the candidate the option of eclipse or intellij and ensure it will compile!!!!
Make sure jUnit and the major mocking frameworks (mock4j, Mockito, ??) are in the classpath.


AIMS
Dev working in a pair situation and communicating well, with reasoned decision making.
Not frightened to make constant revisions and refactoring as assumptions prove wrong.
See an understanding that testing drives good design. If you can't test it, it is probably poor design.



DURING
Set out that the aims are to observe coding style. It is not about the end result, but how you get there.

Initially, ask the candidate to make comments on the class.  e.g.
* Magic numbers
* Poor commenting
* Poor class naming - great name for interface - poor name for a concrete class.
* Stack will not shrink memory allocation.
* Efficiency of the grow() method (use System.arrayCopy()? )  - But first see if the bug is spotted in the current version.

As the comments come up, ask the candidate to make the required changes. Hopefully she will at that point start writing tests.
If not, then subtle prompts are the order of the day. As they start changing the class, ask how they know that the functionality
will not be affected. Make sure negative and positive testing is included.

Tests might include:
* pushItemGrowsStackSize
* poppingItemShrinksStackSize
* poppingItemOnEmptyStackThrows
* pushingItemOnFullStackCausesReallocation
* growingStackKeepsStackIntegrity


Discuss test naming styles(testThat..., Given-When-Then..., can...), and testing techniques (e.g. fixture testing, mocking, stubbing, setup-action-test)

Once the initial pass has been completed, start discussing requirements that are needed by you (as the developer that is
going to be consuming the class). These are concrete requirements, so once the requirements have been agreed, would want to
see some tests being written either after the functionality had been written, or more preferably BEFORE.

* I will be using this for a very dynamic data set. i.e. growing and shrinking a lot.
* I need a strategy for growing and shrinking the stack - interface / mock.
* I need to genericise this class.
* I need a thread safe version

Some of these requirements might be thrown up by the tests being written. For example:

The need to see how many items / capacity are in the stack. How is this coded for (package level method, commented 'just for testing?')
Look at code coverage. What can we learn from that?


Steve Lake